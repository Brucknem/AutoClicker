//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Marcel Bruckner\Documents\RS-Bots\C#\AutoClicker\AutoClicker\InstructionsParser\AutoClicker.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoClicker {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class AutoClickerParser : Parser {
	public const int
		X=1, Y=2, ENDX=3, ENDY=4, HOVER=5, CLICK=6, DRAG=7, TEXT=8, INPUT=9, BUTTON=10, 
		LEFT=11, RIGHT=12, MIDDLE=13, MOVEMENT=14, SINUS=15, SPRING=16, JUMP=17, 
		KEYSTROKE=18, KEY=19, DELAY=20, REPETITIONS=21, SPEED=22, SHIFT=23, CTRL=24, 
		ALT=25, EQ=26, SLASH=27, IS=28, QUOTE=29, TRUE=30, FALSE=31, NUMBER=32, 
		DECIMAL=33, WORD=34, WHITESPACE=35, NEWLINE=36, STRING=37;
	public const int
		RULE_intTuple = 0, RULE_doubleTuple = 1, RULE_trueFalse = 2, RULE_instructions = 3, 
		RULE_instruction = 4, RULE_commons = 5, RULE_delay = 6, RULE_repetitions = 7, 
		RULE_speed = 8, RULE_shift = 9, RULE_ctrl = 10, RULE_alt = 11, RULE_hover = 12, 
		RULE_click = 13, RULE_drag = 14, RULE_xPos = 15, RULE_yPos = 16, RULE_endX = 17, 
		RULE_endY = 18, RULE_button = 19, RULE_movement = 20, RULE_keyInput = 21, 
		RULE_keystroke = 22, RULE_stringInput = 23, RULE_text = 24;
	public static readonly string[] ruleNames = {
		"intTuple", "doubleTuple", "trueFalse", "instructions", "instruction", 
		"commons", "delay", "repetitions", "speed", "shift", "ctrl", "alt", "hover", 
		"click", "drag", "xPos", "yPos", "endX", "endY", "button", "movement", 
		"keyInput", "keystroke", "stringInput", "text"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'='", "'/'", "':'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "X", "Y", "ENDX", "ENDY", "HOVER", "CLICK", "DRAG", "TEXT", "INPUT", 
		"BUTTON", "LEFT", "RIGHT", "MIDDLE", "MOVEMENT", "SINUS", "SPRING", "JUMP", 
		"KEYSTROKE", "KEY", "DELAY", "REPETITIONS", "SPEED", "SHIFT", "CTRL", 
		"ALT", "EQ", "SLASH", "IS", "QUOTE", "TRUE", "FALSE", "NUMBER", "DECIMAL", 
		"WORD", "WHITESPACE", "NEWLINE", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoClicker.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AutoClickerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IntTupleContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(AutoClickerParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(AutoClickerParser.NUMBER, i);
		}
		public ITerminalNode SLASH() { return GetToken(AutoClickerParser.SLASH, 0); }
		public IntTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterIntTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitIntTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTupleContext intTuple() {
		IntTupleContext _localctx = new IntTupleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_intTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(EQ);
			State = 51; Match(NUMBER);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SLASH) {
				{
				State = 52; Match(SLASH);
				State = 53; Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleTupleContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(AutoClickerParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(AutoClickerParser.DECIMAL, i);
		}
		public ITerminalNode SLASH() { return GetToken(AutoClickerParser.SLASH, 0); }
		public DoubleTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleTuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterDoubleTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitDoubleTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleTupleContext doubleTuple() {
		DoubleTupleContext _localctx = new DoubleTupleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_doubleTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(EQ);
			State = 57; Match(DECIMAL);
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SLASH) {
				{
				State = 58; Match(SLASH);
				State = 59; Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode TRUE() { return GetToken(AutoClickerParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AutoClickerParser.FALSE, 0); }
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterTrueFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitTrueFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(EQ);
			State = 63;
			_la = _input.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoClickerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoClickerParser.NEWLINE, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instructions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HOVER) | (1L << CLICK) | (1L << DRAG) | (1L << TEXT) | (1L << KEYSTROKE) | (1L << NEWLINE))) != 0)) {
				{
				{
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HOVER) | (1L << CLICK) | (1L << DRAG) | (1L << TEXT) | (1L << KEYSTROKE))) != 0)) {
					{
					State = 65; instruction();
					}
				}

				State = 68; Match(NEWLINE);
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public ClickContext click() {
			return GetRuleContext<ClickContext>(0);
		}
		public HoverContext hover() {
			return GetRuleContext<HoverContext>(0);
		}
		public DragContext drag() {
			return GetRuleContext<DragContext>(0);
		}
		public KeystrokeContext keystroke() {
			return GetRuleContext<KeystrokeContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_instruction);
		try {
			State = 79;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLICK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; click();
				}
				break;
			case HOVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; hover();
				}
				break;
			case DRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; drag();
				}
				break;
			case KEYSTROKE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77; keystroke();
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonsContext : ParserRuleContext {
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public RepetitionsContext repetitions() {
			return GetRuleContext<RepetitionsContext>(0);
		}
		public SpeedContext speed() {
			return GetRuleContext<SpeedContext>(0);
		}
		public ShiftContext shift() {
			return GetRuleContext<ShiftContext>(0);
		}
		public CtrlContext ctrl() {
			return GetRuleContext<CtrlContext>(0);
		}
		public AltContext alt() {
			return GetRuleContext<AltContext>(0);
		}
		public CommonsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commons; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterCommons(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitCommons(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommons(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonsContext commons() {
		CommonsContext _localctx = new CommonsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_commons);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DELAY:
				{
				State = 81; delay();
				}
				break;
			case REPETITIONS:
				{
				State = 82; repetitions();
				}
				break;
			case SPEED:
				{
				State = 83; speed();
				}
				break;
			case SHIFT:
				{
				State = 84; shift();
				}
				break;
			case CTRL:
				{
				State = 85; ctrl();
				}
				break;
			case ALT:
				{
				State = 86; alt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayContext : ParserRuleContext {
		public ITerminalNode DELAY() { return GetToken(AutoClickerParser.DELAY, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public DelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterDelay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitDelay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelayContext delay() {
		DelayContext _localctx = new DelayContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_delay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 89; Match(DELAY);
			State = 90; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitionsContext : ParserRuleContext {
		public ITerminalNode REPETITIONS() { return GetToken(AutoClickerParser.REPETITIONS, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public RepetitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterRepetitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitRepetitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitionsContext repetitions() {
		RepetitionsContext _localctx = new RepetitionsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_repetitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 92; Match(REPETITIONS);
			State = 93; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedContext : ParserRuleContext {
		public ITerminalNode SPEED() { return GetToken(AutoClickerParser.SPEED, 0); }
		public DoubleTupleContext doubleTuple() {
			return GetRuleContext<DoubleTupleContext>(0);
		}
		public SpeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterSpeed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitSpeed(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedContext speed() {
		SpeedContext _localctx = new SpeedContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_speed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 95; Match(SPEED);
			State = 96; doubleTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftContext : ParserRuleContext {
		public ITerminalNode SHIFT() { return GetToken(AutoClickerParser.SHIFT, 0); }
		public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		public ShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftContext shift() {
		ShiftContext _localctx = new ShiftContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 98; Match(SHIFT);
			State = 99; trueFalse();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlContext : ParserRuleContext {
		public ITerminalNode CTRL() { return GetToken(AutoClickerParser.CTRL, 0); }
		public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		public CtrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterCtrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitCtrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlContext ctrl() {
		CtrlContext _localctx = new CtrlContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ctrl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101; Match(CTRL);
			State = 102; trueFalse();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltContext : ParserRuleContext {
		public ITerminalNode ALT() { return GetToken(AutoClickerParser.ALT, 0); }
		public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		public AltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltContext alt() {
		AltContext _localctx = new AltContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_alt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 104; Match(ALT);
			State = 105; trueFalse();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HoverContext : ParserRuleContext {
		public ITerminalNode HOVER() { return GetToken(AutoClickerParser.HOVER, 0); }
		public ITerminalNode IS() { return GetToken(AutoClickerParser.IS, 0); }
		public XPosContext[] xPos() {
			return GetRuleContexts<XPosContext>();
		}
		public XPosContext xPos(int i) {
			return GetRuleContext<XPosContext>(i);
		}
		public YPosContext[] yPos() {
			return GetRuleContexts<YPosContext>();
		}
		public YPosContext yPos(int i) {
			return GetRuleContext<YPosContext>(i);
		}
		public MovementContext[] movement() {
			return GetRuleContexts<MovementContext>();
		}
		public MovementContext movement(int i) {
			return GetRuleContext<MovementContext>(i);
		}
		public CommonsContext[] commons() {
			return GetRuleContexts<CommonsContext>();
		}
		public CommonsContext commons(int i) {
			return GetRuleContext<CommonsContext>(i);
		}
		public HoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hover; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterHover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitHover(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHover(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HoverContext hover() {
		HoverContext _localctx = new HoverContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_hover);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(HOVER);
			State = 108; Match(IS);
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << X) | (1L << Y) | (1L << MOVEMENT) | (1L << DELAY) | (1L << REPETITIONS) | (1L << SPEED) | (1L << SHIFT) | (1L << CTRL) | (1L << ALT))) != 0)) {
				{
				State = 113;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case X:
					{
					State = 109; xPos();
					}
					break;
				case Y:
					{
					State = 110; yPos();
					}
					break;
				case MOVEMENT:
					{
					State = 111; movement();
					}
					break;
				case DELAY:
				case REPETITIONS:
				case SPEED:
				case SHIFT:
				case CTRL:
				case ALT:
					{
					State = 112; commons();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClickContext : ParserRuleContext {
		public ITerminalNode CLICK() { return GetToken(AutoClickerParser.CLICK, 0); }
		public ITerminalNode IS() { return GetToken(AutoClickerParser.IS, 0); }
		public ButtonContext[] button() {
			return GetRuleContexts<ButtonContext>();
		}
		public ButtonContext button(int i) {
			return GetRuleContext<ButtonContext>(i);
		}
		public XPosContext[] xPos() {
			return GetRuleContexts<XPosContext>();
		}
		public XPosContext xPos(int i) {
			return GetRuleContext<XPosContext>(i);
		}
		public YPosContext[] yPos() {
			return GetRuleContexts<YPosContext>();
		}
		public YPosContext yPos(int i) {
			return GetRuleContext<YPosContext>(i);
		}
		public MovementContext[] movement() {
			return GetRuleContexts<MovementContext>();
		}
		public MovementContext movement(int i) {
			return GetRuleContext<MovementContext>(i);
		}
		public CommonsContext[] commons() {
			return GetRuleContexts<CommonsContext>();
		}
		public CommonsContext commons(int i) {
			return GetRuleContext<CommonsContext>(i);
		}
		public ClickContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_click; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterClick(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitClick(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClick(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClickContext click() {
		ClickContext _localctx = new ClickContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_click);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(CLICK);
			State = 119; Match(IS);
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << X) | (1L << Y) | (1L << BUTTON) | (1L << MOVEMENT) | (1L << DELAY) | (1L << REPETITIONS) | (1L << SPEED) | (1L << SHIFT) | (1L << CTRL) | (1L << ALT))) != 0)) {
				{
				State = 125;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BUTTON:
					{
					State = 120; button();
					}
					break;
				case X:
					{
					State = 121; xPos();
					}
					break;
				case Y:
					{
					State = 122; yPos();
					}
					break;
				case MOVEMENT:
					{
					State = 123; movement();
					}
					break;
				case DELAY:
				case REPETITIONS:
				case SPEED:
				case SHIFT:
				case CTRL:
				case ALT:
					{
					State = 124; commons();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DragContext : ParserRuleContext {
		public ITerminalNode DRAG() { return GetToken(AutoClickerParser.DRAG, 0); }
		public ITerminalNode IS() { return GetToken(AutoClickerParser.IS, 0); }
		public EndXContext[] endX() {
			return GetRuleContexts<EndXContext>();
		}
		public EndXContext endX(int i) {
			return GetRuleContext<EndXContext>(i);
		}
		public EndYContext[] endY() {
			return GetRuleContexts<EndYContext>();
		}
		public EndYContext endY(int i) {
			return GetRuleContext<EndYContext>(i);
		}
		public ButtonContext[] button() {
			return GetRuleContexts<ButtonContext>();
		}
		public ButtonContext button(int i) {
			return GetRuleContext<ButtonContext>(i);
		}
		public XPosContext[] xPos() {
			return GetRuleContexts<XPosContext>();
		}
		public XPosContext xPos(int i) {
			return GetRuleContext<XPosContext>(i);
		}
		public YPosContext[] yPos() {
			return GetRuleContexts<YPosContext>();
		}
		public YPosContext yPos(int i) {
			return GetRuleContext<YPosContext>(i);
		}
		public MovementContext[] movement() {
			return GetRuleContexts<MovementContext>();
		}
		public MovementContext movement(int i) {
			return GetRuleContext<MovementContext>(i);
		}
		public CommonsContext[] commons() {
			return GetRuleContexts<CommonsContext>();
		}
		public CommonsContext commons(int i) {
			return GetRuleContext<CommonsContext>(i);
		}
		public DragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterDrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitDrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DragContext drag() {
		DragContext _localctx = new DragContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_drag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(DRAG);
			State = 131; Match(IS);
			State = 141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << X) | (1L << Y) | (1L << ENDX) | (1L << ENDY) | (1L << BUTTON) | (1L << MOVEMENT) | (1L << DELAY) | (1L << REPETITIONS) | (1L << SPEED) | (1L << SHIFT) | (1L << CTRL) | (1L << ALT))) != 0)) {
				{
				State = 139;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDX:
					{
					State = 132; endX();
					}
					break;
				case ENDY:
					{
					State = 133; endY();
					}
					break;
				case BUTTON:
					{
					State = 134; button();
					}
					break;
				case X:
					{
					State = 135; xPos();
					}
					break;
				case Y:
					{
					State = 136; yPos();
					}
					break;
				case MOVEMENT:
					{
					State = 137; movement();
					}
					break;
				case DELAY:
				case REPETITIONS:
				case SPEED:
				case SHIFT:
				case CTRL:
				case ALT:
					{
					State = 138; commons();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 143;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XPosContext : ParserRuleContext {
		public ITerminalNode X() { return GetToken(AutoClickerParser.X, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public XPosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xPos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterXPos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitXPos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXPos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XPosContext xPos() {
		XPosContext _localctx = new XPosContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_xPos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 144; Match(X);
			State = 145; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YPosContext : ParserRuleContext {
		public ITerminalNode Y() { return GetToken(AutoClickerParser.Y, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public YPosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yPos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterYPos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitYPos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYPos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YPosContext yPos() {
		YPosContext _localctx = new YPosContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_yPos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 147; Match(Y);
			State = 148; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndXContext : ParserRuleContext {
		public ITerminalNode ENDX() { return GetToken(AutoClickerParser.ENDX, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public EndXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endX; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterEndX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitEndX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndXContext endX() {
		EndXContext _localctx = new EndXContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_endX);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 150; Match(ENDX);
			State = 151; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndYContext : ParserRuleContext {
		public ITerminalNode ENDY() { return GetToken(AutoClickerParser.ENDY, 0); }
		public IntTupleContext intTuple() {
			return GetRuleContext<IntTupleContext>(0);
		}
		public EndYContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endY; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterEndY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitEndY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndYContext endY() {
		EndYContext _localctx = new EndYContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_endY);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 153; Match(ENDY);
			State = 154; intTuple();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ButtonContext : ParserRuleContext {
		public ITerminalNode BUTTON() { return GetToken(AutoClickerParser.BUTTON, 0); }
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode LEFT() { return GetToken(AutoClickerParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(AutoClickerParser.RIGHT, 0); }
		public ITerminalNode MIDDLE() { return GetToken(AutoClickerParser.MIDDLE, 0); }
		public ButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_button; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterButton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitButton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitButton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ButtonContext button() {
		ButtonContext _localctx = new ButtonContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_button);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 156; Match(BUTTON);
			State = 157; Match(EQ);
			State = 158;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << MIDDLE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovementContext : ParserRuleContext {
		public ITerminalNode MOVEMENT() { return GetToken(AutoClickerParser.MOVEMENT, 0); }
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode SINUS() { return GetToken(AutoClickerParser.SINUS, 0); }
		public ITerminalNode SPRING() { return GetToken(AutoClickerParser.SPRING, 0); }
		public ITerminalNode JUMP() { return GetToken(AutoClickerParser.JUMP, 0); }
		public MovementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterMovement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitMovement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovementContext movement() {
		MovementContext _localctx = new MovementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_movement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 160; Match(MOVEMENT);
			State = 161; Match(EQ);
			State = 162;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SINUS) | (1L << SPRING) | (1L << JUMP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyInputContext : ParserRuleContext {
		public ITerminalNode KEY() { return GetToken(AutoClickerParser.KEY, 0); }
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode WORD() { return GetToken(AutoClickerParser.WORD, 0); }
		public KeyInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyInput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterKeyInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitKeyInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyInputContext keyInput() {
		KeyInputContext _localctx = new KeyInputContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_keyInput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 164; Match(KEY);
			State = 165; Match(EQ);
			State = 166; Match(WORD);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeystrokeContext : ParserRuleContext {
		public ITerminalNode KEYSTROKE() { return GetToken(AutoClickerParser.KEYSTROKE, 0); }
		public ITerminalNode IS() { return GetToken(AutoClickerParser.IS, 0); }
		public KeyInputContext[] keyInput() {
			return GetRuleContexts<KeyInputContext>();
		}
		public KeyInputContext keyInput(int i) {
			return GetRuleContext<KeyInputContext>(i);
		}
		public CommonsContext[] commons() {
			return GetRuleContexts<CommonsContext>();
		}
		public CommonsContext commons(int i) {
			return GetRuleContext<CommonsContext>(i);
		}
		public KeystrokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keystroke; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterKeystroke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitKeystroke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeystroke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeystrokeContext keystroke() {
		KeystrokeContext _localctx = new KeystrokeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_keystroke);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(KEYSTROKE);
			State = 169; Match(IS);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY) | (1L << DELAY) | (1L << REPETITIONS) | (1L << SPEED) | (1L << SHIFT) | (1L << CTRL) | (1L << ALT))) != 0)) {
				{
				State = 172;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case KEY:
					{
					State = 170; keyInput();
					}
					break;
				case DELAY:
				case REPETITIONS:
				case SPEED:
				case SHIFT:
				case CTRL:
				case ALT:
					{
					State = 171; commons();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringInputContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(AutoClickerParser.EQ, 0); }
		public ITerminalNode STRING() { return GetToken(AutoClickerParser.STRING, 0); }
		public StringInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringInput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterStringInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitStringInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringInputContext stringInput() {
		StringInputContext _localctx = new StringInputContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_stringInput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 177; Match(EQ);
			State = 178; Match(STRING);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AutoClickerParser.TEXT, 0); }
		public ITerminalNode IS() { return GetToken(AutoClickerParser.IS, 0); }
		public ITerminalNode[] INPUT() { return GetTokens(AutoClickerParser.INPUT); }
		public ITerminalNode INPUT(int i) {
			return GetToken(AutoClickerParser.INPUT, i);
		}
		public StringInputContext[] stringInput() {
			return GetRuleContexts<StringInputContext>();
		}
		public StringInputContext stringInput(int i) {
			return GetRuleContext<StringInputContext>(i);
		}
		public CommonsContext[] commons() {
			return GetRuleContexts<CommonsContext>();
		}
		public CommonsContext commons(int i) {
			return GetRuleContext<CommonsContext>(i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoClickerListener typedListener = listener as IAutoClickerListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoClickerVisitor<TResult> typedVisitor = visitor as IAutoClickerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(TEXT);
			State = 181; Match(IS);
			State = 187;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INPUT) | (1L << DELAY) | (1L << REPETITIONS) | (1L << SPEED) | (1L << SHIFT) | (1L << CTRL) | (1L << ALT))) != 0)) {
				{
				State = 185;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case INPUT:
					{
					State = 182; Match(INPUT);
					State = 183; stringInput();
					}
					break;
				case DELAY:
				case REPETITIONS:
				case SPEED:
				case SHIFT:
				case CTRL:
				case ALT:
					{
					State = 184; commons();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 189;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'\xC1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x5\x2\x39\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3?\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x5\x5\x45\n\x5\x3\x5\a\x5H\n\x5\f\x5\xE\x5K\v"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x5\aZ\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\a\xEt\n\xE\f\xE\xE\xEw\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\a\xF\x80\n\xF\f\xF\xE\xF\x83\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x8E\n\x10\f\x10\xE\x10\x91\v\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\xAF\n\x18"+
		"\f\x18\xE\x18\xB2\v\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\a\x1A\xBC\n\x1A\f\x1A\xE\x1A\xBF\v\x1A\x3\x1A\x2\x2\x2\x1B\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x2"+
		"\x5\x3\x2 !\x3\x2\r\xF\x3\x2\x11\x13\xC8\x2\x34\x3\x2\x2\x2\x4:\x3\x2"+
		"\x2\x2\x6@\x3\x2\x2\x2\bI\x3\x2\x2\x2\nQ\x3\x2\x2\x2\fY\x3\x2\x2\x2\xE"+
		"[\x3\x2\x2\x2\x10^\x3\x2\x2\x2\x12\x61\x3\x2\x2\x2\x14\x64\x3\x2\x2\x2"+
		"\x16g\x3\x2\x2\x2\x18j\x3\x2\x2\x2\x1Am\x3\x2\x2\x2\x1Cx\x3\x2\x2\x2\x1E"+
		"\x84\x3\x2\x2\x2 \x92\x3\x2\x2\x2\"\x95\x3\x2\x2\x2$\x98\x3\x2\x2\x2&"+
		"\x9B\x3\x2\x2\x2(\x9E\x3\x2\x2\x2*\xA2\x3\x2\x2\x2,\xA6\x3\x2\x2\x2.\xAA"+
		"\x3\x2\x2\x2\x30\xB3\x3\x2\x2\x2\x32\xB6\x3\x2\x2\x2\x34\x35\a\x1C\x2"+
		"\x2\x35\x38\a\"\x2\x2\x36\x37\a\x1D\x2\x2\x37\x39\a\"\x2\x2\x38\x36\x3"+
		"\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x3\x3\x2\x2\x2:;\a\x1C\x2\x2;>\a#\x2"+
		"\x2<=\a\x1D\x2\x2=?\a#\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x5\x3\x2\x2"+
		"\x2@\x41\a\x1C\x2\x2\x41\x42\t\x2\x2\x2\x42\a\x3\x2\x2\x2\x43\x45\x5\n"+
		"\x6\x2\x44\x43\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46"+
		"H\a&\x2\x2G\x44\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2"+
		"J\t\x3\x2\x2\x2KI\x3\x2\x2\x2LR\x5\x1C\xF\x2MR\x5\x1A\xE\x2NR\x5\x1E\x10"+
		"\x2OR\x5.\x18\x2PR\x5\x32\x1A\x2QL\x3\x2\x2\x2QM\x3\x2\x2\x2QN\x3\x2\x2"+
		"\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2R\v\x3\x2\x2\x2SZ\x5\xE\b\x2TZ\x5\x10\t"+
		"\x2UZ\x5\x12\n\x2VZ\x5\x14\v\x2WZ\x5\x16\f\x2XZ\x5\x18\r\x2YS\x3\x2\x2"+
		"\x2YT\x3\x2\x2\x2YU\x3\x2\x2\x2YV\x3\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2"+
		"\x2Z\r\x3\x2\x2\x2[\\\a\x16\x2\x2\\]\x5\x2\x2\x2]\xF\x3\x2\x2\x2^_\a\x17"+
		"\x2\x2_`\x5\x2\x2\x2`\x11\x3\x2\x2\x2\x61\x62\a\x18\x2\x2\x62\x63\x5\x4"+
		"\x3\x2\x63\x13\x3\x2\x2\x2\x64\x65\a\x19\x2\x2\x65\x66\x5\x6\x4\x2\x66"+
		"\x15\x3\x2\x2\x2gh\a\x1A\x2\x2hi\x5\x6\x4\x2i\x17\x3\x2\x2\x2jk\a\x1B"+
		"\x2\x2kl\x5\x6\x4\x2l\x19\x3\x2\x2\x2mn\a\a\x2\x2nu\a\x1E\x2\x2ot\x5 "+
		"\x11\x2pt\x5\"\x12\x2qt\x5*\x16\x2rt\x5\f\a\x2so\x3\x2\x2\x2sp\x3\x2\x2"+
		"\x2sq\x3\x2\x2\x2sr\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2"+
		"\x2v\x1B\x3\x2\x2\x2wu\x3\x2\x2\x2xy\a\b\x2\x2y\x81\a\x1E\x2\x2z\x80\x5"+
		"(\x15\x2{\x80\x5 \x11\x2|\x80\x5\"\x12\x2}\x80\x5*\x16\x2~\x80\x5\f\a"+
		"\x2\x7Fz\x3\x2\x2\x2\x7F{\x3\x2\x2\x2\x7F|\x3\x2\x2\x2\x7F}\x3\x2\x2\x2"+
		"\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2"+
		"\x2\x2\x82\x1D\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x85\a\t\x2\x2\x85\x8F"+
		"\a\x1E\x2\x2\x86\x8E\x5$\x13\x2\x87\x8E\x5&\x14\x2\x88\x8E\x5(\x15\x2"+
		"\x89\x8E\x5 \x11\x2\x8A\x8E\x5\"\x12\x2\x8B\x8E\x5*\x16\x2\x8C\x8E\x5"+
		"\f\a\x2\x8D\x86\x3\x2\x2\x2\x8D\x87\x3\x2\x2\x2\x8D\x88\x3\x2\x2\x2\x8D"+
		"\x89\x3\x2\x2\x2\x8D\x8A\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C\x3\x2"+
		"\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90"+
		"\x1F\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\a\x3\x2\x2\x93\x94\x5\x2"+
		"\x2\x2\x94!\x3\x2\x2\x2\x95\x96\a\x4\x2\x2\x96\x97\x5\x2\x2\x2\x97#\x3"+
		"\x2\x2\x2\x98\x99\a\x5\x2\x2\x99\x9A\x5\x2\x2\x2\x9A%\x3\x2\x2\x2\x9B"+
		"\x9C\a\x6\x2\x2\x9C\x9D\x5\x2\x2\x2\x9D\'\x3\x2\x2\x2\x9E\x9F\a\f\x2\x2"+
		"\x9F\xA0\a\x1C\x2\x2\xA0\xA1\t\x3\x2\x2\xA1)\x3\x2\x2\x2\xA2\xA3\a\x10"+
		"\x2\x2\xA3\xA4\a\x1C\x2\x2\xA4\xA5\t\x4\x2\x2\xA5+\x3\x2\x2\x2\xA6\xA7"+
		"\a\x15\x2\x2\xA7\xA8\a\x1C\x2\x2\xA8\xA9\a$\x2\x2\xA9-\x3\x2\x2\x2\xAA"+
		"\xAB\a\x14\x2\x2\xAB\xB0\a\x1E\x2\x2\xAC\xAF\x5,\x17\x2\xAD\xAF\x5\f\a"+
		"\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE"+
		"\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1/\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2"+
		"\xB3\xB4\a\x1C\x2\x2\xB4\xB5\a\'\x2\x2\xB5\x31\x3\x2\x2\x2\xB6\xB7\a\n"+
		"\x2\x2\xB7\xBD\a\x1E\x2\x2\xB8\xB9\a\v\x2\x2\xB9\xBC\x5\x30\x19\x2\xBA"+
		"\xBC\x5\f\a\x2\xBB\xB8\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBF\x3\x2\x2"+
		"\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x33\x3\x2\x2\x2\xBF\xBD"+
		"\x3\x2\x2\x2\x12\x38>\x44IQYsu\x7F\x81\x8D\x8F\xAE\xB0\xBB\xBD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AutoClicker
